export class CreatePaymentMethodController{constructor(a,b,c,d){this.stripeService=a,this.userEmail=b,this.cardElementSelector=c,this.statusCallback=d}async setup(){const a=this.stripeService.elements();this.card=this.createCard(a),this.card.mount(this.cardElementSelector),this.card.on("change",a=>this.handleCardChange(a))}async createPaymentMethod(){this.showLoadingStatus();const a=await this.stripeService.createPaymentMethod({type:"card",card:this.card,billing_details:{name:this.userEmail}});if(a.error)throw this.showFailedStatus(a.error.message),new Error(a.error.message);try{await this.registerPaymentMethod(a.paymentMethod.id)}catch(a){throw this.showFailedStatus(a.message),a}this.showSuccessStatus()}async registerPaymentMethod(a){const b={method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({paymentMethodId:a})},c=await fetch("/subscription/register-payment-method",b);if(200!==c.status){const a=await c.json();throw new Error(a.error)}return c.json()}createCard(a){return a.create("card",{style:{base:{color:"#32325d"}}})}handleCardChange({error:a}){a?this.setErrorStatus(a.message):this.setErrorStatus("")}setErrorStatus(a){this.statusCallback({status:"error",message:a})}showLoadingStatus(){this.statusCallback("loading")}showFailedStatus(a){this.statusCallback({status:"failed",message:a})}showSuccessStatus(){this.statusCallback("success")}}