export class ConfirmPaymentController{constructor(a,b,c){this.stripeService=a,this.priceId=b,this.statusCallback=c}async confirmPayment(){this.showLoadingStatus();try{const{subscription:a,paymentIntent:b,paymentMethodId:c}=await this.createSubscription(this.priceId);await this.handlePaymentThatRequiresCustomerAction({subscriptionStatus:a.status,paymentIntent:b,paymentMethodId:c}),this.showSuccessStatus()}catch(a){this.showFailedStatus(a.message)}}async createSubscription(a){var b;const c={method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({priceId:a})},d=await fetch("/subscription/create",c);if(200!==d.status){const a=await d.json();throw new Error(null!==(b=a.error)&&void 0!==b?b:"Unknown")}const e=await d.json();if(!isCreateSubscriptionResult(e))throw new Error("Invalid response");return e}async handlePaymentThatRequiresCustomerAction({subscriptionStatus:a,paymentIntent:b,paymentMethodId:c}){if("active"!==a){const a="requires_action"===b.status||"requires_confirmation"===b.status;if(a){const a=await this.stripeService.confirmCardPayment(b.client_secret,{payment_method:c});if(a.error||"succeeded"!==a.paymentIntent.status)throw this.showFailedStatus("An error occurred during payment"),a}}}showLoadingStatus(){this.statusCallback("loading")}showSuccessStatus(){this.statusCallback("success")}showFailedStatus(a){this.statusCallback({status:"failed",message:a})}}function isCreateSubscriptionResult(a){var b,c,d;return"string"==typeof(null===(b=null===a||void 0===a?void 0:a.subscription)||void 0===b?void 0:b.status)&&"string"==typeof(null===(c=null===a||void 0===a?void 0:a.paymentIntent)||void 0===c?void 0:c.status)&&"string"==typeof(null===(d=null===a||void 0===a?void 0:a.paymentIntent)||void 0===d?void 0:d.client_secret)&&"string"==typeof(null===a||void 0===a?void 0:a.paymentMethodId)}